require( rCharts )#
options(RCHART_TEMPLATE = 'Rickshaw.html')#
#specify the data#
data = data.frame(#
c( 0, 1, 2, 3 ),#
c( 40, 49, 17, 42 ),#
stringsAsFactors = FALSE#
)#
colnames(data) <- c("x","y")#
#build the plot#
r1 <- Rickshaw$new()#
r1$layer(#
y ~ x,#
data = data,#
type = "area",#
colors= "steelblue",#
height = 240,#
width = 540#
)#
#turn off all the nice built in features#
#to match the sparse first example#
r1$set(#
hoverDetail = FALSE,#
xAxis = FALSE,#
yAxis = FALSE,#
shelving = FALSE,#
legend = FALSE,#
slider = FALSE,#
highlight = FALSE#
)
data <- read.csv("data/data2.csv", stringsAsFactors = FALSE)#
#build the plot#
r2 <- Rickshaw$new()#
r2$layer(#
y ~ x,#
data = data,#
type = "area",#
colors= "steelblue",#
height = 240,#
width = 540#
)#
#turn off all the nice built in features#
#to match the sparse second example#
r2$set(#
hoverDetail = FALSE,#
xAxis = FALSE,#
yAxis = FALSE,#
shelving = FALSE,#
legend = FALSE,#
slider = FALSE,#
highlight = FALSE#
)
p1 <- nPlot(mpg ~ wt, group = 'cyl', data = mtcars, type = 'scatterChart')#
p1$xAxis(axisLabel = 'Weight')#
p1
## {title: MultiBar Chart}#
hair_eye = as.data.frame(HairEyeColor)#
p2 <- nPlot(Freq ~ Hair, group = 'Eye', data = subset(hair_eye, Sex == "Female"), type = 'multiBarChart')#
p2$chart(color = c('brown', 'blue', '#594c26', 'green'))#
p2#
## {title: MultiBar Horizontal Chart}#
p3 <- nPlot(~ cyl, group = 'gear', data = mtcars, type = 'multiBarHorizontalChart')#
p3$chart(showControls = F)#
p3#
## {title: Pie Chart}#
p4 <- nPlot(~ cyl, data = mtcars, type = 'pieChart')#
p4#
## {title: Donut Chart}#
p5 <- nPlot(~ cyl, data = mtcars, type = 'pieChart')#
p5$chart(donut = TRUE)#
p5#
## {title: Line Chart}#
data(economics, package = 'ggplot2')#
p6 <- nPlot(uempmed ~ date, data = economics, type = 'lineChart')#
p6#
## {title: Line with Focus Chart }#
ecm <- reshape2::melt(economics[,c('date', 'uempmed', 'psavert')], id = 'date')#
p7 <- nPlot(value ~ date, group = 'variable', data = ecm, type = 'lineWithFocusChart')#
#test format dates on the xAxis#
#also good test of javascript functions as parameters#
#dates from R to JSON will come over as number of days since 1970-01-01#
#so convert to milliseconds 86400000 in a day and then format with d3#
#on lineWithFocusChart type xAxis will also set x2Axis unless it is specified#
p7$xAxis( tickFormat="#!function(d) {return d3.time.format('%b %Y')(new Date( d * 86400000 ));}!#" )#
#test xAxis also sets x2Axis#
p7#
#now test setting x2Axis to something different#
#test format dates on the x2Axis#
#test to show %Y format which is different than xAxis#
p7$x2Axis( tickFormat="#!function(d) {return d3.time.format('%Y')(new Date( d * 86400000 ));}!#" )#
p7#
#test set xAxis again to make sure it does not override set x2Axis#
p7$xAxis( NULL, replace = T)#
p7
require( rCharts )
?options
require( rCharts )#
options(RCHART_TEMPLATE = 'Rickshaw.html')#
#specify the data#
data = data.frame(#
  c( 0, 1, 2, 3 ),#
  c( 40, 49, 17, 42 ),#
  stringsAsFactors = FALSE#
)#
colnames(data) <- c("x","y")#
#build the plot#
r1 <- Rickshaw$new()#
r1$layer(#
  y ~ x,#
  data = data,#
  type = "area",#
  colors= "steelblue",#
  height = 240,#
  width = 540#
)#
#turn off all the nice built in features#
#to match the sparse first example#
r1$set(#
  hoverDetail = FALSE,#
  xAxis = FALSE,#
  yAxis = FALSE,#
  shelving = FALSE,#
  legend = FALSE,#
  slider = FALSE,#
  highlight = FALSE#
)#
#r1
r1
# Example 2#
require(rCharts)#
# options(RCHART_TEMPLATE = 'Rickshaw.html')#
require(RColorBrewer)#
data(economics, package = 'ggplot2')#
datm = reshape2::melt(#
  economics[,c('date', 'psavert', 'uempmed')],#
  id = 'date'#
)#
datm <- transform(datm, date = to_jsdate(date))#
p2 <- Rickshaw$new()#
p2$layer(value ~ date, group = 'variable', data = datm, type = 'line', #
  colors = c("darkred", "darkslategrey"))
p2
to_jsdate <- function(date_){#
  val = as.POSIXct(as.Date(date_),origin="1970-01-01")#
  as.numeric(val)#
}#
p3 <- Rickshaw$new()#
p3$layer(Employed ~ Year, data = longley, type = 'line', colors = c('darkred'))#
#
usp = reshape2::melt(USPersonalExpenditure)#
p4 <- Rickshaw$new()#
p4$layer(value ~ Var2, group = 'Var1', data = usp, type = 'area')#
p4$show(T)#
#
dat <- yaml::yaml.load('[ { x: 0, y: 40 }, { x: 1, y: 49 }, { x: 2, y: 17 }, { x: 3, y: 42 } ]')#
#
dat <- data.frame(#
  x = c(0, 1, 2, 3),#
  y = c(40, 49, 2, 17)#
)
# Example 1#
p1 <- Rickshaw$new()#
p1$layer(~ cyl, group = 'am', data = mtcars, type = 'bar')#
#
# Example 2#
require(rCharts)#
# options(RCHART_TEMPLATE = 'Rickshaw.html')#
require(RColorBrewer)#
data(economics, package = 'ggplot2')#
datm = reshape2::melt(#
  economics[,c('date', 'psavert', 'uempmed')],#
  id = 'date'#
)#
datm <- transform(datm, date = to_jsdate(date))#
p2 <- Rickshaw$new()#
p2$layer(value ~ date, group = 'variable', data = datm, type = 'line', #
  colors = c("darkred", "darkslategrey"))
p2
to_jsdate <- function(date_){#
  val = as.POSIXct(as.Date(date_),origin="1970-01-01")#
  as.numeric(val)#
}#
p3 <- Rickshaw$new()#
p3$layer(Employed ~ Year, data = longley, type = 'line', colors = c('darkred'))#
#
usp = reshape2::melt(USPersonalExpenditure)#
p4 <- Rickshaw$new()#
p4$layer(value ~ Var2, group = 'Var1', data = usp, type = 'area')#
p4$show(T)
library(pXr)
library(pXR)
library(pxR)
library(pxr)
library(pXR)
library(pXr)
library(pxR)
library(ggplot2)
install.packages(pxR)
install.packages("pxR")
library(pxR)
px<- read.px("~/Downloads/ilc_di01.px")
px
px<- read.px("~/Downloads/ilc_di01.px")
?read.px
px<- read.px("~/Downloads/ilc_di01.px")
source('https://raw.githubusercontent.com/walkerke/teaching-with-datavis/master/pyramids/rcharts_pyramids.R')
## Script to generate population pyramids from the Census Bureau's International Database with rCharts ###
#
library(XML)#
library(reshape2)#
library(rCharts)#
library(plyr)#
getAgeTable <- function(country, year) {#
  c1 <- "http://www.census.gov/population/international/data/idb/region.php?N=%20Results%20&T=10&A=separate&RT=0&Y="  #
  c2 <- "&R=-1&C="#
  yrs <- gsub(" ", "", toString(year))#
  url <- paste0(c1, yrs, c2, country)#
  df <- data.frame(readHTMLTable(url))#
  nms <- c("Year", "Age", "total", "Male", "Female", "percent", "pctMale", "pctFemale", "sexratio")  #
  names(df) <- nms  #
  cols <- c(1, 3:9)#
  df[,cols] <- apply(df[,cols], 2, function(x) as.numeric(as.character(gsub(",", "", x))))#
  df <- df[df$Age != 'Total', ]  #
  ord <- 1:nrow(df)#
  df <- cbind(df, ord)#
  return(df)#
}
dPyramid <- function(country, year, colors=NULL) {#
  dat <- getAgeTable(country, year)#
  dat$Male <- -1 * dat$Male#
  keep <- c("Year", "Age", "Male", "Female", "ord")#
  dat.sub <- dat[,keep]#
  dat.melt <- melt(dat.sub, #
                   value.name='Population', #
                   variable.name = 'Gender', #
                   id.vars=c('Age', 'ord', 'Year') )#
  dat.melt$gencode <- ifelse(dat.melt$Gender == 'Male', 1, 2)#
  d1 <- dPlot(#
    x = "Population", #
    y = "Age", #
    groups = "Gender", #
    data = dat.melt, #
    type = 'bar')#
  d1$yAxis(type = "addCategoryAxis", orderRule = "ord")#
  d1$xAxis(type = "addMeasureAxis")#
  d1$legend( x = 60, y = 10, width = 700, height = 20, horizontalAlign = "right")#
  if (!is.null(colors)){#
    d1$colorAxis(#
      type = "addColorAxis", #
      colorSeries = "gencode", #
      palette = colors#
    )#
  }#
  if (length(year) > 1) {#
    d1$set(storyboard = "Year")#
    max_x <- round_any(max(dat.melt$Population), 10000, f = ceiling)#
    min_x <- round_any(min(dat.melt$Population), 10000, f = floor)#
    d1$xAxis(overrideMax = max_x, overrideMin = min_x)#
  }#
  if (max(dat.melt$Population >= 1000000)) {#
    d1$setTemplate( afterScript = #
                      "#
                  <script>#
                    x._getFormat = function () {#
                    return function(d) {#
                    return d3.format(',.1f')(Math.abs(d) / 1000000) + 'm';#
                     };#
                    };#
                  myChart.draw()#
                  </script>#
                  ")#
  } else {#
    d1$setTemplate( afterScript = #
                      "#
                  <script>#
                    x._getFormat = function () {#
                    return function(d) {#
                    return d3.format(',.0f')(Math.abs(d) / 1000) + 'k';#
                     };#
                    };#
                  myChart.draw()#
                  </script>#
                  ")#
  }#
#
  d1#
}
d1
dPyramid
dPyramid('GM', seq(2000, 2050, 10), colors = c('black', 'red'))
# Initialize libraries required#
library(rCharts)#
library(reshape2)#
meansconferences=read.csv("https://raw.github.com/patilv/ESPNBball/master/meansconferences.csv")#
# Mean statistics for all WCC and Big 12 teams for seasons 2001-2002 through 2012-2013  #
# mean Points.Per.Game, mean Games.Played, mean Minutes,mean Rebounds.Per.Game, mean Assists.Per.Game, mean Steals.Per.Game,mean Blocks.Per.Game,#
# mean Turnovers.Per.Game, mean Field.Goal.Percent, mean Free.Throw.Percent, mean Three.Point.FieldGoal.Percent#
# For more info on how this dataset was generated, #
# please see blog post at http://analyticsandvisualization.blogspot.com/2013/08/short-tales-of-two-ncaa-basketball.html#
meltmeansconferences=melt(meansconferences[-c(1,10:14)], id.vars=c("Conference","Year")) # Remove the first irrelevant index column and few additional ones to keep this clean#
# Horizontal Stacked bars chart 100% Storyboard#
d1=dPlot(y="Year", x="value",data=meltmeansconferences, groups="variable",type="bar") # looking at the entire data instead of subset#
d1$yAxis(type="addCategoryAxis", orderRule="Year")#
d1$xAxis(type="addPctAxis") # instead of addMeasureAxis used in the Horizontal Stacked Bar#
d1$set(storyboard = "Conference") # chart changes by conference#
d1$legend(#
  x = 0,#
  y = 0,#
  width = 500,#
  height = 75,#
  horizontalAlign = "right"#
)
# Initialize libraries required#
library(rCharts)#
library(reshape2)#
meansconferences=read.csv("https://raw.github.com/patilv/ESPNBball/master/meansconferences.csv")
library(rCharts)#
library(reshape2)#
meansconferences=read.csv("https://raw.github.com/patilv/ESPNBball/master/meansconferences.csv")
require(XML)
xmlParse("~/swissinfo/2014_07_03_evolutionDeLaPopulationSuisse/Etranger/ink/area_swissVsForeigners copy.svg")
xml<- xmlParse("~/swissinfo/2014_07_03_evolutionDeLaPopulationSuisse/Etranger/ink/area_swissVsForeigners copy.svg")
str(xml)
xml
?saveXML
xmlAttrs(xml)
xml
xmlSize(r)
xmlSize(xml)
xmlName(xml)
xml[[1]]
str(xml)
xm<- xmlParse("~/swissinfo/2014_07_03_evolutionDeLaPopulationSuisse/Etranger/ink/area_swissVsForeigners copy.svg")
str(xm)
xm
xmlRoot(xml)
xmlRoot(xm)
test<- xmlRoot(xm)
str(test)
xmlAttrs(test)
xmlName(test)
test
xmltop<- xmlRoot(xm)
xmlName(xmltop)
xmlSize(xmltop)
xmlName(xmltop[[1]])
xmlName(xmltop[[2]])
xmlName(xmltop[[3]])
xmlName(xmltop[[4]])
xmlName(xmltop[[5]])
xmlInternalTreeParse(xm)
xmlInternalTreeParse("~/swissinfo/2014_07_03_evolutionDeLaPopulationSuisse/Etranger/ink/area_swissVsForeigners copy.svg")
xm<- xmlInternalTreeParse("~/swissinfo/2014_07_03_evolutionDeLaPopulationSuisse/Etranger/ink/area_swissVsForeigners copy.svg")
str(xm)
?xpathApply
library(rCharts)
RawBlameHistory   #
#get data used by dimple for all of its examples as a first test#
data <- read.delim(#
  "http://pmsi-alignalytics.github.io/dimple/data/example_data.tsv"#
)#
#
#eliminate . to avoid confusion in javascript#
colnames(data) <- gsub("[.]","",colnames(data))#
#
#example 1 vt bar#
d1 <- dPlot(#
  x ="Month" ,#
  y = "UnitSales",#
  data = data,#
  type = "bar"#
)#
d1$xAxis(orderRule = "Date")#
d1#
#
#example 2 vt stacked bar#
d1 <- dPlot(#
  x ="Month" ,#
  y = "UnitSales",#
  groups = "Channel",#
  data = data,#
  type = "bar"#
)#
d1$xAxis(orderRule = "Date")#
d1$legend(#
  x = 60,#
  y = 10,#
  width = 700,#
  height = 20,#
  horizontalAlign = "right"#
)#
d1#
#
#example 3 vertical 100% bar#
#use from above and just change y axis type#
d1$yAxis(type = "addPctAxis")#
d1
#example 11 horizontal stacked grouped bar#
d1 <- dPlot(#
  x = "UnitSales", #
  y = c("PriceTier","Channel"),#
  groups = "Owner",#
  data = data,#
  type = "bar"#
)#
d1$xAxis(type = "addMeasureAxis")#
#good test of orderRule on y instead of x#
d1$yAxis(type = "addCategoryAxis")#
d1$legend(#
  x = 200,#
  y = 10,#
  width = 400,#
  height = 20,#
  horizontalAlign = "right"#
)#
d1#
#
#example 12 horizontal 100% grouped bar#
d1$xAxis(type = "addPctAxis")#
d1
#example 13 vertical marimekko#
d1 <- dPlot(#
  UnitSales ~ Channel,#
  groups = "Owner",#
  data = data,#
  type = "bar"#
)#
d1$xAxis(type = "addAxis", measure = "UnitSales", showPercent = TRUE)#
d1$yAxis(type = "addPctAxis")#
d1$legend(#
  x = 200,#
  y = 10,#
  width = 400,#
  height = 20,#
  horizontalAlign = "right"#
)#
d1
#example 22 Bubble#
d1 <- dPlot(#
x = "UnitSalesMonthlyChange",#
y = "PriceMonthlyChange",#
z = "OperatingProfit",#
groups = c("SKU","Channel"),#
data = subset(data, Date == "01/12/2012"),#
type = "bubble"#
)#
d1$xAxis( type = "addMeasureAxis" )#
d1$yAxis( type = "addMeasureAxis" )#
d1$zAxis( type = "addMeasureAxis" )#
d1$legend(#
x = 200,#
y = 10,#
width = 500,#
height = 20,#
horizontalAlign = "right"#
)
d1
#example 23 Vertical Bubble Lollipop#
d1 <- dPlot(#
x = "Month",#
y = "UnitSales",#
z = "OperatingProfit",#
groups = "Channel",#
data = subset(#
data,#
Date %in% c(#
"01/07/2012",#
"01/08/2012",#
"01/09/2012",#
"01/10/2012",#
"01/11/2012",#
"01/12/2012"#
    )#
  ),#
type = "bubble"#
)#
d1$xAxis( type = "addCategoryAxis", orderRule = "Date" )#
d1$yAxis( type = "addMeasureAxis" )#
d1$zAxis( type = "addMeasureAxis" )#
d1$legend(#
x = 200,#
y = 10,#
width = 500,#
height = 20,#
horizontalAlign = "right"#
)#
d1
d1
setwd('/Users/nguyendu/Google Drive/sandbox/www/minimalResponsiveTemplate')
library(rCharts)#
#get data used by dimple for all of its examples as a first test#
data <- read.delim(#
"http://pmsi-alignalytics.github.io/dimple/data/example_data.tsv"#
)#
#
#example 23 Vertical Bubble Lollipop#
d1 <- dPlot(#
x = "Month",#
y = "UnitSales",#
z = "OperatingProfit",#
groups = "Channel",#
data = subset(#
data,#
Date %in% c(#
"01/07/2012",#
"01/08/2012",#
"01/09/2012",#
"01/10/2012",#
"01/11/2012",#
"01/12/2012"#
    )#
  ),#
type = "bubble"#
)#
d1$xAxis( type = "addCategoryAxis", orderRule = "Date" )#
d1$yAxis( type = "addMeasureAxis" )#
d1$zAxis( type = "addMeasureAxis" )#
d1$legend(#
x = 200,#
y = 10,#
width = 500,#
height = 20,#
horizontalAlign = "right"#
)#
d1
#example 22 Bubble#
d1 <- dPlot(#
x = "UnitSalesMonthlyChange",#
y = "PriceMonthlyChange",#
z = "OperatingProfit",#
groups = c("SKU","Channel"),#
data = subset(data, Date == "01/12/2012"),#
type = "bubble"#
)#
d1$xAxis( type = "addMeasureAxis" )#
d1$yAxis( type = "addMeasureAxis" )#
d1$zAxis( type = "addMeasureAxis" )#
d1$legend(#
x = 200,#
y = 10,#
width = 500,#
height = 20,#
horizontalAlign = "right"#
)#
d1
subset(data, Date == "01/12/2012")
setwd('/Users/nguyendu/Google Drive/sandbox/www/minimalResponsiveTemplate')
#eliminate . to avoid confusion in javascript#
colnames(data) <- gsub("[.]","",colnames(data))#
#
#example 23 Vertical Bubble Lollipop#
d1 <- dPlot(#
x = "Month",#
y = "UnitSales",#
z = "OperatingProfit",#
groups = "Channel",#
data = subset(#
data,#
Date %in% c(#
"01/07/2012",#
"01/08/2012",#
"01/09/2012",#
"01/10/2012",#
"01/11/2012",#
"01/12/2012"#
    )#
  ),#
type = "bubble"#
)#
d1$xAxis( type = "addCategoryAxis", orderRule = "Date" )#
d1$yAxis( type = "addMeasureAxis" )#
d1$zAxis( type = "addMeasureAxis" )#
d1$legend(#
x = 200,#
y = 10,#
width = 500,#
height = 20,#
horizontalAlign = "right"#
)#
d1
setwd('/Users/nguyendu/Google Drive/sandbox/www/minimalResponsiveTemplate')
d1save
d1$save
d1$save(dindex.html)
d1$save("dindex.html")
getwd()
setwd('/Users/nguyendu/Google Drive/sandbox/www/minimalResponsiveTemplate')
library(rCharts)#
#
#get data used by dimple for all of its examples as a first test#
data <- read.delim(#
"http://pmsi-alignalytics.github.io/dimple/data/example_data.tsv"#
)#
#eliminate . to avoid confusion in javascript#
colnames(data) <- gsub("[.]","",colnames(data))#
#
#example 23 Vertical Bubble Lollipop#
d1 <- dPlot(#
	x = "Month",#
	y = "UnitSales",#
	z = "OperatingProfit",#
	groups = "Channel",#
	data = subset(data,	Date %in% c("01/07/2012","01/08/2012","01/09/2012","01/10/2012","01/11/2012","01/12/2012")),#
	type = "bubble",#
	width="100%"#
)#
d1$xAxis( type = "addCategoryAxis", orderRule = "Date" )#
d1$yAxis( type = "addMeasureAxis" )#
d1$zAxis( type = "addMeasureAxis" )#
d1$legend(#
x = 200,#
y = 10,#
width = 500,#
height = 20,#
horizontalAlign = "right"#
)#
d1
setwd('/Users/nguyendu/Google Drive/sandbox/www/minimalResponsiveTemplate')
d1$save("dindex.html")
require(rCharts)#
df <- data.frame(x = c(1:5), y = c(5:1), #
             z = c("A", "B", "C", "D", "E"),#
             name = c("K", "L", "M", "N", "O"))#
h1 <- hPlot(x = "x", y = "y", data = df, type = "scatter", group = "z")
h1$tooltip( formatter = "#! function() { return 'x: '     + this.point.x + #
                                                'y: '    + this.point.y  + #
                                                'name: '  + this.point.group; } !#")
h1
a <- rCharts::Highcharts$new()#
a$series(#
  list(#
    list(#
      data = list(#
        list(x = 1, y = 1, z = 1, name = "malmo"), #
        list(x = 2, y = 2, z = 2, name = "gothenburg"),#
        list(x = 3, y = 3, z = 3, name = "stockholm")#
      ),#
      name = "sweden"#
    ),#
    list(#
      data = list(#
        list(x = 4, y = 4, z = 4, name = "oslo")#
      ),#
      name = "norway"#
    )#
  )#
)#
a$tooltip(formatter = "#! function() { return this.point.name; } !#")#
a$chart(zoomType = "xy", type = "bubble")#
a$show(cdn = T)
a
dataLabels: {#
                    enabled: true,#
                    style: { textShadow: 'none' },#
                    formatter: function() {#
                        return this.point.name;#
                    }#
                },
setwd('/Users/nguyendu/Google Drive/sandbox/www/minimalResponsiveTemplate')
library(rCharts)#
#
a <- rCharts::Highcharts$new()#
a$series(#
  list(#
    list(#
      data = list(#
        list(x = 1, y = 1, z = 1, name = "malmo"), #
        list(x = 2, y = 2, z = 2, name = "gothenburg"),#
        list(x = 3, y = 3, z = 3, name = "stockholm")#
      ),#
      name = "sweden"#
    ),#
    list(#
      data = list(#
        list(x = 4, y = 4, z = 4, name = "oslo")#
      ),#
      name = "norway"#
    )#
  )#
)#
a$tooltip(formatter = "#! function() { return this.point.name; } !#")#
a$chart(zoomType = "xy", type = "bubble")#
a$plotOptions(column = list(dataLabels = list(enabled = T, rotation = -90, align = 'right', color = '#FFFFFF', x = 4, y = 10, style = list(fontSize = '13px', fontFamily = 'Verdana, sans-serif'))))
